{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba2c3b86-163d-4592-93f7-7b3e75032b6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\kushs\\anaconda3\\lib\\site-packages (1.32.0)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (5.0.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (1.6.2)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (5.3.3)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (8.1.7)\n",
      "Requirement already satisfied: numpy<2,>=1.19.3 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (1.26.4)\n",
      "Requirement already satisfied: packaging<24,>=16.8 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (23.2)\n",
      "Requirement already satisfied: pandas<3,>=1.3.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (2.2.2)\n",
      "Requirement already satisfied: pillow<11,>=7.1.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (10.3.0)\n",
      "Requirement already satisfied: protobuf<5,>=3.20 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (3.20.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (14.0.2)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (2.32.2)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (13.3.5)\n",
      "Requirement already satisfied: tenacity<9,>=8.1.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (8.2.2)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (4.11.0)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (3.1.37)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (0.8.0)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (6.4.1)\n",
      "Requirement already satisfied: watchdog>=2.1.5 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from streamlit) (4.0.1)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (3.1.4)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.19.2)\n",
      "Requirement already satisfied: toolz in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (0.12.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.6)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.7)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from pandas<3,>=1.3.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.7.4)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=2.2.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.15.1)\n",
      "Requirement already satisfied: smmap<5,>=3.0.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.1.3)\n",
      "Requirement already satisfied: attrs>=22.2.0 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (23.1.0)\n",
      "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2023.7.1)\n",
      "Requirement already satisfied: referencing>=0.28.4 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.30.2)\n",
      "Requirement already satisfied: rpds-py>=0.7.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.10.6)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from markdown-it-py<3.0.0,>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\kushs\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.3.0->streamlit) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "db8c6862-368e-4303-8524-4635763313f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from statsmodels.tsa.seasonal import seasonal_decompose\n",
    "from statsmodels.tsa.holtwinters import Holt\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from prophet import Prophet\n",
    "from keras.layers import LSTM, Dense\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "bd1be036-4e72-46bb-9f1c-ff8705ce2be4",
   "metadata": {},
   "outputs": [],
   "source": [
    "st.title(\"Hotel Booking Time Series Forecasting App\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"hotel_bookings.csv\", type=\"csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0e3b0d60-3fc9-4b8e-ae3b-af602c49710a",
   "metadata": {},
   "outputs": [],
   "source": [
    "if uploaded_file:\n",
    "    df = pd.read_csv(uploaded_file)\n",
    "    st.subheader(\"1️⃣ Preview Uploaded Data\")\n",
    "    st.write(df.head())\n",
    "\n",
    "    df['arrival_date'] = pd.to_datetime(\n",
    "        df['arrival_date_year'].astype(str) + '-' +\n",
    "        df['arrival_date_month'] + '-' +\n",
    "        df['arrival_date_day_of_month'].astype(str),\n",
    "        errors='coerce'\n",
    "    )\n",
    "\n",
    "    df = df[['arrival_date', 'booking_price']].dropna()\n",
    "    df = df.rename(columns={'arrival_date': 'ds', 'booking_price': 'y'})\n",
    "    df = df.sort_values('ds')\n",
    "\n",
    "    st.line_chart(df.set_index('ds')['y'])\n",
    "\n",
    "    st.subheader(\"2️⃣ Time Series Decomposition\")\n",
    "    model_type = st.radio(\"Choose Decomposition Type\", [\"Additive\", \"Multiplicative\"])\n",
    "    freq = st.slider(\"Select Seasonal Period (e.g., 30 for monthly)\", 1, 365, 30)\n",
    "\n",
    "    try:\n",
    "        decomposition = seasonal_decompose(df.set_index(\"ds\")[\"y\"], model=model_type.lower(), period=freq)\n",
    "        fig, ax = plt.subplots(4, 1, figsize=(10, 8))\n",
    "        decomposition.observed.plot(ax=ax[0], title=\"Observed\")\n",
    "        decomposition.trend.plot(ax=ax[1], title=\"Trend\")\n",
    "        decomposition.seasonal.plot(ax=ax[2], title=\"Seasonality\")\n",
    "        decomposition.resid.plot(ax=ax[3], title=\"Residuals\")\n",
    "        plt.tight_layout()\n",
    "        st.pyplot(fig)\n",
    "    except Exception as e:\n",
    "        st.warning(f\"Could not perform decomposition: {e}\")\n",
    "\n",
    "    st.subheader(\"3️⃣ Forecasting & Accuracy Evaluation\")\n",
    "    model_choice = st.selectbox(\"Choose Forecasting Model\", [\"Holt's Linear Trend\", \"ARIMA\", \"Prophet\", \"LSTM\"])\n",
    "\n",
    "    monthly = df.set_index('ds').resample('M').sum()['y'].dropna()\n",
    "    scaler = MinMaxScaler()\n",
    "    monthly_scaled = pd.Series(scaler.fit_transform(monthly.values.reshape(-1, 1)).flatten(), index=monthly.index)\n",
    "\n",
    "    train = monthly_scaled.iloc[:-6]\n",
    "    test = monthly_scaled.iloc[-6:]\n",
    "\n",
    "    forecast, actual = None, None\n",
    "\n",
    "    if model_choice == \"Holt's Linear Trend\":\n",
    "        model = Holt(train).fit()\n",
    "        forecast_scaled = model.forecast(steps=len(test))\n",
    "        forecast = scaler.inverse_transform(forecast_scaled.values.reshape(-1, 1)).flatten()\n",
    "        actual = scaler.inverse_transform(test.values.reshape(-1, 1)).flatten()\n",
    "\n",
    "    elif model_choice == \"ARIMA\":\n",
    "        model = ARIMA(train, order=(1,1,1)).fit()\n",
    "        forecast_scaled = model.forecast(steps=len(test))\n",
    "        forecast = scaler.inverse_transform(forecast_scaled.values.reshape(-1, 1)).flatten()\n",
    "        actual = scaler.inverse_transform(test.values.reshape(-1, 1)).flatten()\n",
    "\n",
    "    elif model_choice == \"Prophet\":\n",
    "        prophet_df = pd.DataFrame({'ds': monthly.index, 'y': monthly.values})\n",
    "        m = Prophet()\n",
    "        m.fit(prophet_df)\n",
    "        future = m.make_future_dataframe(periods=6, freq='M')\n",
    "        forecast_df = m.predict(future)\n",
    "        forecast = forecast_df[-6:]['yhat'].values\n",
    "        actual = monthly[-6:].values\n",
    "\n",
    "        fig3 = m.plot(forecast_df)\n",
    "        st.pyplot(fig3)\n",
    "\n",
    "    elif model_choice == \"LSTM\":\n",
    "        data_lstm = monthly.values.reshape(-1, 1)\n",
    "        scaler_lstm = MinMaxScaler()\n",
    "        scaled_data = scaler_lstm.fit_transform(data_lstm)\n",
    "\n",
    "        generator = TimeseriesGenerator(scaled_data, scaled_data, length=12, batch_size=1)\n",
    "\n",
    "        model = Sequential()\n",
    "        model.add(LSTM(50, activation='relu', input_shape=(12, 1)))\n",
    "        model.add(Dense(1))\n",
    "        model.compile(optimizer='adam', loss='mse')\n",
    "        model.fit(generator, epochs=10, verbose=0)\n",
    "\n",
    "        predictions = []\n",
    "        current_batch = scaled_data[-12:].reshape(1, 12, 1)\n",
    "        for i in range(6):\n",
    "            pred = model.predict(current_batch)[0]\n",
    "            predictions.append(pred)\n",
    "            current_batch = np.append(current_batch[:, 1:, :], [[pred]], axis=1)\n",
    "\n",
    "        forecast = scaler_lstm.inverse_transform(np.array(predictions).reshape(-1, 1)).flatten()\n",
    "        actual = monthly[-6:].values\n",
    "\n",
    "    if forecast is not None and actual is not None:\n",
    "        st.write(\"🔮 Forecast vs Actual\")\n",
    "        fig2, ax2 = plt.subplots(figsize=(10, 5))\n",
    "        ax2.plot(monthly.index[-12:], monthly[-12:], label=\"Actual\")\n",
    "        ax2.plot(monthly.index[-6:], forecast, label=\"Forecast\")\n",
    "        ax2.set_title(f\"{model_choice} Forecast (Next 6 Months)\")\n",
    "        ax2.legend()\n",
    "        st.pyplot(fig2)\n",
    "\n",
    "        st.subheader(\"📏 Evaluation Metrics\")\n",
    "        mae = mean_absolute_error(actual, forecast)\n",
    "        mse = mean_squared_error(actual, forecast)\n",
    "        st.metric(\"Mean Absolute Error (MAE)\", f\"{mae:.2f}\")\n",
    "        st.metric(\"Mean Squared Error (MSE)\", f\"{mse:.2f}\")\n"
   ]
  },
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
